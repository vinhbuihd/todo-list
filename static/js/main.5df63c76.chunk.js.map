{"version":3,"sources":["components/TodoForm/index.jsx","components/TodoBullAction/index.jsx","components/TodoList/index.jsx","App.js","index.js"],"names":["TodoForm","handleSubmitForm","update","currentToday","Date","toISOString","substring","useState","title","inputText","setInputText","desc","textArea","setTextArea","date","setDate","piority","setPiority","onChangeTextArea","e","target","value","handleChange","type","onChangeSelect","id","onSubmit","preventDefault","test","formValue","getTime","className","placeholder","onChange","required","htmlFor","TodoBullAction","removeAllChecked","onClick","TodoList","tasks","handleRemove","handleUpdate","removeCheckbox","checkbox","setCheckbox","filterText","setFilterText","taskList","setUpdate","updateForm","handleChangeCheckbox","newCheckBox","filter","item","isChecked","checked","push","IDchecked","map","forEach","task","toLowerCase","indexOf","trim","updateTask","removeID","App","JSON","parse","localStorage","getItem","setTasks","newTasks","sort","a","b","setItem","stringify","updateID","IDs","includes","toString","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5df63c76.chunk.js","sourcesContent":["import React , {useState} from 'react';\r\n\r\nfunction TodoForm({handleSubmitForm, update}) {\r\n    const currentToday = new Date().toISOString().substring(0,10);\r\n\r\n    const [inputText, setInputText] = useState(update? update.title : '');\r\n    const [textArea, setTextArea] = useState(update? update.desc : '');\r\n    const [date, setDate] = useState(update? update.date : currentToday);\r\n    const [piority, setPiority] = useState(update? update.piority : 'normal');\r\n   \r\n    const onChangeTextArea = e => setTextArea(e.target.value)\r\n\r\n    const handleChange = e => {\r\n        const {type, value} = e.target;\r\n        if (type === 'text') {\r\n            setInputText(value)\r\n        }\r\n        if (type === 'date') {\r\n            if (new Date(e.target.value) < (new Date(currentToday))) return;\r\n            setDate(e.target.value)\r\n        } \r\n    }\r\n\r\n    const onChangeSelect = e => setPiority(e.target.value);\r\n    const submitForm = e => {\r\n        e.preventDefault();\r\n        if (!inputText || /^\\s*$/.test(inputText)) return;\r\n        const formValue = {\r\n            id: new Date().getTime(),\r\n            title: inputText,\r\n            desc: textArea,\r\n            date: date,\r\n            piority: piority,\r\n        }\r\n        handleSubmitForm(formValue)\r\n        setInputText('')\r\n        setTextArea('')\r\n        setDate(currentToday)\r\n        setPiority('normal')\r\n    }\r\n\r\n    return (\r\n        <form id='todoForm' onSubmit={submitForm}>\r\n        {\r\n            update?.id ? (\r\n                <>\r\n                    <div>\r\n                        <input \r\n                            className='todoForm-input'\r\n                            type='text'\r\n                            value={inputText}\r\n                            placeholder='Update task ...'\r\n                            onChange={handleChange}\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor='todoForm-textarea'>Description</label>\r\n                        <textarea onChange={onChangeTextArea} id='todoForm-textarea' value={textArea}></textarea>\r\n                    </div>\r\n                    <div className='todoForm-date-piority-box'>\r\n                        <div className='todoForm-half-box'>\r\n                            <label htmlFor='todoForm-date'>Due Date</label>\r\n                            <input type='date' id='todoForm-date' value={date} onChange={handleChange}/>\r\n                        </div>\r\n                        <div className='todoForm-half-box'>\r\n                            <label htmlFor='todoForm-piority'>Piority</label>\r\n                            <select id='todoForm-piority' value={piority} onChange={onChangeSelect}>\r\n                                <option value='low'>Low</option>\r\n                                <option value='normal'>Normal</option>\r\n                                <option value='high'>High</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <button className='todoForm-btn' type='submit'>Update</button>\r\n                    </div>\r\n                </>\r\n            ) \r\n            : (\r\n                <>\r\n                    <div>\r\n                        <input \r\n                            className='todoForm-input'\r\n                            type='text'\r\n                            value={inputText}\r\n                            placeholder='Add new task ...'\r\n                            onChange={handleChange}\r\n                            required\r\n                        />\r\n                    </div>\r\n                    <div>\r\n                        <label htmlFor='todoForm-textarea'>Description</label>\r\n                        <textarea onChange={onChangeTextArea} id='todoForm-textarea' value={textArea}></textarea>\r\n                    </div>\r\n                    <div className='todoForm-date-piority-box'>\r\n                        <div className='todoForm-half-box'>\r\n                            <label htmlFor='todoForm-date'>Due Date</label>\r\n                            <input type='date' id='todoForm-date' value={date} onChange={handleChange}/>\r\n                        </div>\r\n                        <div className='todoForm-half-box'>\r\n                            <label htmlFor='todoForm-piority'>Piority</label>\r\n                            <select id='todoForm-piority' value={piority} onChange={onChangeSelect}>\r\n                                <option value='low'>Low</option>\r\n                                <option value='normal'>Normal</option>\r\n                                <option value='high'>High</option>\r\n                            </select>\r\n                        </div>\r\n                    </div>\r\n                    <div>\r\n                        <button className='todoForm-btn' type='submit'>Add</button>\r\n                    </div>\r\n                </>\r\n            )\r\n        }\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default TodoForm;","import React from 'react';\r\n\r\nfunction TodoBullAction({removeAllChecked}) {\r\n\r\n    return(\r\n        <div className='todo-bullAction-box'>\r\n            <div className='todo-bullAction-title'>Bull Action:</div>\r\n            <div className='todo-bullAction-btn'>\r\n                <button className='todo-bullAction-done-btn todo-btn'>Done</button>\r\n                <button onClick={removeAllChecked} className='todo-bullAction-remove-btn todo-btn'>Remove</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TodoBullAction;","import React, { useState } from 'react';\r\nimport TodoBullAction from '../TodoBullAction';\r\nimport TodoForm from '../TodoForm';\r\n\r\nfunction TodoList({ tasks, handleRemove, handleUpdate ,removeCheckbox }) {\r\n    const [checkbox, setCheckbox] = useState([]);\r\n    const [filterText, setFilterText] = useState('')\r\n    const taskList = [];\r\n    const [update, setUpdate] = useState({\r\n        id: null,\r\n        title: '',\r\n        desc: '',\r\n        date: '',\r\n        piority: '',\r\n    })\r\n    const removeTask = removeID => handleRemove(removeID);\r\n    \r\n    const updateTask = task => {\r\n        setUpdate({\r\n            id: task.id, \r\n            title: task.title,\r\n            desc: task.desc,\r\n            date: task.date,\r\n            piority: task.piority,\r\n        })\r\n    }\r\n\r\n    const updateForm = (formValue) => {\r\n        handleUpdate(formValue, update.id);\r\n        setUpdate({\r\n            id: null,\r\n            title: '',\r\n            desc: '',\r\n            date: '',\r\n            piority: '',\r\n        })\r\n    }\r\n    \r\n    const handleChangeCheckbox = e => {\r\n        const newCheckBox = [...checkbox].filter(item => item.id !== e.target.value);\r\n        const item = {\r\n            id: e.target.value,\r\n            isChecked: e.target.checked,\r\n        }\r\n        if (item.isChecked === true) {\r\n            newCheckBox.push(item)\r\n        }\r\n        setCheckbox(newCheckBox);\r\n    }\r\n    \r\n    const removeAllChecked = () => {\r\n        const IDchecked = [...checkbox].map(item => item.id);\r\n        removeCheckbox(IDchecked);\r\n        setCheckbox([]);\r\n    }\r\n\r\n    const handleChangeFilterText = e => {\r\n        setFilterText(e.target.value);\r\n    }\r\n\r\n    tasks.forEach(task => {\r\n        if (task.title.toLowerCase().indexOf(filterText.trim().toLowerCase()) === -1) return;\r\n        taskList.push(task)\r\n    })\r\n\r\n    return (\r\n        <>\r\n        <input \r\n            className='todo-search' \r\n            type='text' \r\n            placeholder='Search ...' \r\n            onChange={handleChangeFilterText}\r\n        />\r\n        <ul className='todo-list'>\r\n            {taskList.map(task => (\r\n                <li key={task.id} className='todo-item'>\r\n                    <div className='todo-item-box'>\r\n                        <div className='todo-titlebox'>\r\n                            <input \r\n                                id={task.id} \r\n                                className='todo-checkbox' \r\n                                type='checkbox' \r\n                                onChange={handleChangeCheckbox} \r\n                                value={task.id}\r\n                            />\r\n                            <label htmlFor={task.id} className='todo-title'>{task.title}</label>\r\n                        </div>\r\n                        <div className='todo-btnbox'>\r\n                            <button className='todo-btn blue' onClick={() => updateTask(task)}>Detail</button>\r\n                            <button className='todo-btn red' onClick={() => removeTask(task.id)}>Remove</button>\r\n                        </div>\r\n                    </div>\r\n                    {\r\n                        update.id === task.id \r\n                        ? <div className='todo-update'>\r\n                        <TodoForm handleSubmitForm={updateForm} update={update}/> \r\n                        </div>\r\n                        : ''\r\n                    }\r\n                </li>\r\n            ))}\r\n        </ul>\r\n        {\r\n            checkbox.map(item => item.isChecked \r\n                ? <TodoBullAction removeAllChecked={removeAllChecked}/> \r\n                : '')\r\n        }\r\n        </>\r\n    );\r\n}\r\n\r\nexport default TodoList;","import React, { useState } from 'react';\nimport TodoForm from './components/TodoForm';\nimport TodoList from './components/TodoList';\nimport './App.css';\nimport './AppReponsive.css';\n\n\n\nfunction App() {\n  const [tasks, setTasks] = useState(() => {\n    const initialTask = JSON.parse(localStorage.getItem('TASK-STORE')) || [];\n    return initialTask;\n  });\n  \n\n  const addTask = (formValue) => {\n    const newTasks = [formValue, ...tasks];\n    newTasks.sort((a, b) => new Date(a.date) - new Date(b.date));\n    setTasks(newTasks);\n    localStorage.setItem('TASK-STORE', JSON.stringify(newTasks))\n  }\n\n  const updateTask = (formValue, updateID) => {\n    const newTasks = [...tasks].map(task => task.id === updateID ? formValue : task);\n    newTasks.sort((a, b) => new Date(a.date) - new Date(b.date));\n    setTasks(newTasks);\n    localStorage.setItem('TASK-STORE', JSON.stringify(newTasks))\n  }\n\n  const removeTask = removeID => {\n    const newTasks = [...tasks].filter(task => task.id !== removeID);\n    setTasks(newTasks);\n    localStorage.setItem('TASK-STORE', JSON.stringify(newTasks))\n  }\n\n  const removeTaskCheckbox = IDs => {\n    const newTasks = [...tasks].filter(task => !IDs.includes(task.id.toString()))\n    setTasks(newTasks)\n    localStorage.setItem('TASK-STORE', JSON.stringify(newTasks))\n  }\n\n  // console.log(inital)\n\n  return (\n    <div className='app'>\n      <div className='app-newtask'>\n        <h2 className='app-heading'>New Task</h2>\n        <TodoForm handleSubmitForm={addTask}/>\n      </div>\n      <div className='app-todolist'>\n        <h2 className='app-heading'>To Do List</h2>\n        <TodoList \n          tasks={tasks} \n          handleRemove={removeTask} \n          handleUpdate={updateTask} \n          removeCheckbox={removeTaskCheckbox}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}